#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');
const config = require('../config');
const logFormat = require('util').format;
const logger = require('../logger');
const mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

const port = config.server.port;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//connect to the MongoDB database then start the server
mongoose.connect(config.db.uri)
  .then(() => {

    server.listen(port, config.server.hostname)

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
   
    logger.info(config.server.protocol + '://' + config.server.hostname + ':' + config.server.port);

  }).catch((error) => {

    logger.error(logFormat('Failed to connect to database. Shutting down server...'));
    logger.error(logFormat(error));
    process.exit(1);

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);

}